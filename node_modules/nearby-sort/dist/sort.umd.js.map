{"version":3,"file":"sort.umd.js","sources":["../src/index.ts"],"sourcesContent":["/**\n * Index file for the package\n * @author Yousuf Kalim\n */\n// Distance calculation\nconst getDistance = (lat1: number, lon1: number, lat2: number, lon2: number): number => {\n  const R = 6371; // Radius of the earth in km\n  const dLat = deg2rad(lat2 - lat1); // deg2rad below\n  const dLon = deg2rad(lon2 - lon1);\n  const a =\n    Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n    Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  const d = R * c; // Distance in km\n  return d;\n};\n\n// Deg conversion\nconst deg2rad = (deg: number): number => {\n  return deg * (Math.PI / 180);\n};\n\n// Validate the arguments\nconst validateArgs = (lat: number, long: number, arr: any[], asc: boolean): void => {\n  if (\n    isNaN(parseFloat(lat as unknown as string)) ||\n    isNaN(parseFloat(long as unknown as string)) ||\n    !arr\n  ) {\n    throw new Error('Invalid arguments');\n  }\n  if (typeof lat !== 'number' || typeof long !== 'number') {\n    throw new Error('lat and long should be numbers');\n  }\n  if (!Array.isArray(arr)) {\n    throw new Error('Second argument should be an array');\n  }\n  if (typeof asc !== 'boolean') {\n    throw new Error('Asc argument should be a boolean');\n  }\n};\n\n/**\n * Sort the array according to the user's lat long\n * @param lat {Number} - User's latitude\n * @param long {Number} - User's longitude\n * @param arr {Array} - Array of objects that contain lat and long\n * @param asc {Boolean} - Ascending or descending order\n * @returns {Array} - Sorted array\n */\nconst nearbySort = async (\n  { lat, long }: { lat: number; long: number },\n  arr: any[],\n  asc = true,\n): Promise<any[]> => {\n  return await new Promise((resolve, reject) => {\n    try {\n      validateArgs(lat, long, arr, asc);\n      const sortedArray = arr.sort((a, b) => {\n        const distanceA = getDistance(lat, long, a.lat, a.long);\n        const distanceB = getDistance(lat, long, b.lat, b.long);\n        return asc ? distanceA - distanceB : distanceB - distanceA;\n      });\n      resolve(sortedArray);\n    } catch (err) {\n      reject(err);\n    }\n  });\n};\n\nexport default nearbySort;\n"],"names":["lat1","lon1","lat2","lon2","dLat","deg2rad","a","Math","sin","cos","dLon","atan2","sqrt","deg","PI","nearbySort","arr","asc","lat","long","Promise","resolve","reject","isNaN","parseFloat","Error","_long","Array","isArray","validateArgs","sort","b","distanceA","getDistance","distanceB","err","e"],"mappings":"6NAKA,MAAoB,SAACA,EAAcC,EAAcC,EAAcC,GAC7D,IACMC,EAAOC,EAAQH,EAAOF,KACfK,EAAQF,EAAOF,GACrBK,EACLC,KAAKC,IAAIJ,EAAO,GAAKG,KAAKC,IAAIJ,EAAO,GACrCG,KAAKE,IAAIJ,EAAQL,IAASO,KAAKE,IAAIJ,EAAQH,IAASK,KAAKC,IAAIE,EAAO,GAAKH,KAAKC,IAAIE,EAAO,GAG3F,OAFU,EAAIH,KAAKI,MAAMJ,KAAKK,KAAKN,GAAIC,KAAKK,KAAK,EAAIN,IAN3C,IASZ,IAGgB,SAACO,GACf,UAAcN,KAAKO,GAAK,IAC1B,SA8BMC,WAEJC,EACAC,GAFEC,IAAAA,IAAAA,IAAKC,EAEPF,EAAAA,cAAAA,IAAAA,GAAM,GACY,IAAA,OAAAG,QAAAC,QACL,IAAWD,QAAC,SAACC,EAASC,GACjC,KAjCiB,SAACJ,EAAaC,EAAcH,EAAYC,GAC3D,GACEM,MAAMC,WAAWN,KACjBK,MAAMC,WAAWL,MAChBH,EAED,UAAeS,MAAC,qBAElB,GAAmB,iBAARP,GAAoC,iBAALQ,EACxC,MAAUD,IAAAA,MAAM,kCAElB,IAAKE,MAAMC,QAAQZ,GACjB,UAAeS,MAAC,sCAElB,GAAmB,oBACjB,UAAeA,MAAC,mCAEpB,CAiBMI,CAAaX,EAAKC,EAAMH,EAAKC,GAM7BI,EALoBL,EAAIc,KAAK,SAACxB,EAAGyB,GAC/B,IAAeC,EAAGC,EAAYf,EAAKC,EAAMb,EAAEY,IAAKZ,EAAC,QAC/B2B,EAAYf,EAAKC,EAAMY,EAAEb,IAAKa,EAAM,MACtD,OAAOd,EAAMe,EAAYE,EAAYA,EAAYF,CACnD,GAID,CAFC,MAAOG,GACPb,EAAOa,EACR,CACH,GACD,CAAA,MAAAC,GAAA,OAAAhB,QAAAE,OAAAc,EAAA,CAAA"}