{"version":3,"file":"sort.modern.js","sources":["../src/index.ts"],"sourcesContent":["/**\n * Index file for the package\n * @author Yousuf Kalim\n */\n// Distance calculation\nconst getDistance = (lat1: number, lon1: number, lat2: number, lon2: number): number => {\n  const R = 6371; // Radius of the earth in km\n  const dLat = deg2rad(lat2 - lat1); // deg2rad below\n  const dLon = deg2rad(lon2 - lon1);\n  const a =\n    Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n    Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  const d = R * c; // Distance in km\n  return d;\n};\n\n// Deg conversion\nconst deg2rad = (deg: number): number => {\n  return deg * (Math.PI / 180);\n};\n\n// Validate the arguments\nconst validateArgs = (lat: number, long: number, arr: any[], asc: boolean): void => {\n  if (\n    isNaN(parseFloat(lat as unknown as string)) ||\n    isNaN(parseFloat(long as unknown as string)) ||\n    !arr\n  ) {\n    throw new Error('Invalid arguments');\n  }\n  if (typeof lat !== 'number' || typeof long !== 'number') {\n    throw new Error('lat and long should be numbers');\n  }\n  if (!Array.isArray(arr)) {\n    throw new Error('Second argument should be an array');\n  }\n  if (typeof asc !== 'boolean') {\n    throw new Error('Asc argument should be a boolean');\n  }\n};\n\n/**\n * Sort the array according to the user's lat long\n * @param lat {Number} - User's latitude\n * @param long {Number} - User's longitude\n * @param arr {Array} - Array of objects that contain lat and long\n * @param asc {Boolean} - Ascending or descending order\n * @returns {Array} - Sorted array\n */\nconst nearbySort = async (\n  { lat, long }: { lat: number; long: number },\n  arr: any[],\n  asc = true,\n): Promise<any[]> => {\n  return await new Promise((resolve, reject) => {\n    try {\n      validateArgs(lat, long, arr, asc);\n      const sortedArray = arr.sort((a, b) => {\n        const distanceA = getDistance(lat, long, a.lat, a.long);\n        const distanceB = getDistance(lat, long, b.lat, b.long);\n        return asc ? distanceA - distanceB : distanceB - distanceA;\n      });\n      resolve(sortedArray);\n    } catch (err) {\n      reject(err);\n    }\n  });\n};\n\nexport default nearbySort;\n"],"names":["lat1","lon1","lat2","lon2","deg2rad","dLon","Math","sin","dLat","cos","atan2","sqrt","a","deg","PI","nearbySort","async","lat","long","arr","asc","Promise","resolve","reject","isNaN","parseFloat","Error","Array","isArray","validateArgs","sort","b","distanceA","getDistance","distanceB","err"],"mappings":"AAKA,QAAoB,CAACA,EAAcC,EAAcC,EAAcC,KAC7D,QACaC,EAAQF,EAAOF,GACtBK,EAAOD,EAAQD,EAAOF,KAE1BK,KAAKC,IAAIC,EAAO,GAAKF,KAAKC,IAAIC,EAAO,GACrCF,KAAKG,IAAIL,EAAQJ,IAASM,KAAKG,IAAIL,EAAQF,IAASI,KAAKC,IAAIF,EAAO,GAAKC,KAAKC,IAAIF,EAAO,GAG3F,OAFU,EAAIC,KAAKI,MAAMJ,KAAKK,KAAKC,GAAIN,KAAKK,KAAK,EAAIC,IAN3C,MAYCR,EAAIS,GACRA,GAAOP,KAAKQ,GAAK,KA+BpBC,EAAaC,OACfC,MAAKC,QACPC,EACAC,GAAM,cAEkBC,QAAC,CAACC,EAASC,KACjC,IAjCiB,EAACN,EAAaC,EAAcC,EAAYC,KAC3D,GACEI,MAAMC,WAAWR,KACjBO,MAAMC,WAAWP,MAChBC,EAED,MAAUO,IAAAA,MAAM,qBAElB,GAAmB,oBAA4B,iBAATR,EACpC,MAAM,IAASQ,MAAC,kCAElB,IAAKC,MAAMC,QAAQT,GACjB,MAAM,UAAU,sCAElB,GAAmB,kBAARC,EACT,MAAM,UAAU,mCACjB,EAkBGS,CAAaZ,EAAKC,EAAMC,EAAKC,GAM7BE,EALoBH,EAAIW,KAAK,CAAClB,EAAGmB,KAC/B,MAAMC,EAAYC,EAAYhB,EAAKC,EAAMN,EAAEK,IAAKL,EAAEM,MAC5CgB,EAAYD,EAAYhB,EAAKC,EAAMa,EAAEd,IAAKc,EAAEb,MAClD,SAAac,EAAYE,EAAYA,EAAYF,IAKpD,CAFC,MAAOG,GACPZ,EAAOY,EACR"}